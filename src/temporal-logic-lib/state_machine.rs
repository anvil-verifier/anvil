// Copyright 2022 VMware, Inc.
// SPDX-License-Identifier: MIT
#![allow(unused_imports)]
use crate::action::*;
use crate::pervasive::{option::*, set::*};
use builtin::*;
use builtin_macros::*;

verus! {

/// `HostStateMachine` helps to write host state machines in a disciplined way
/// by explicitly writing `init`, `actions`, `next_step`, `next` and `output`.
///
/// It takes five generic types:
/// * `State`: The (internal) state of the host.
/// * `Input`: The input from the external world of the state machine. For example a message.
/// * `ActionInput`: The input to feed to the action. It might be a compound of `Input` and other types.
/// * `Output`: The output to send to the external world of the state machine. For example a set of messages.
/// * `Step`: The step label used when the host state machine chooses which step to take.
pub struct HostStateMachine <
    #[verifier(maybe_negative)] State,
    #[verifier(maybe_negative)] Input,
    #[verifier(maybe_negative)] ActionInput,
    #[verifier(maybe_negative)] Output,
    #[verifier(maybe_negative)] Step
> {
    /// The initial internal state.
    pub init: FnSpec(State) -> bool,

    /// The set of actions the state machine can take.
    pub actions: Set<HostAction<State, ActionInput, Output>>,

    /// Check if the corresponding action of the step is satisfied by input, s and s_prime.
    pub next_step: FnSpec(Input, State, State, Step) -> bool,

    /// Check if exists an action that is satisfied by input, s and s_prime.
    pub next: FnSpec(Input, State, State) -> bool,

    /// The output generated by the action that is satisfied by input, s and s_prime.
    pub output: FnSpec(Input, State, State) -> Output,
}



}
