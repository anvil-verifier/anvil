name: Continuous integration
run-name: Continuous integration run by ${{ github.actor }}
on:
  # push:
  #   branches:
  #     - main
  #   paths-ignore:
  #     - "README.md"
  #     - ".gitignore"
  #     - "doc/**"
  pull_request:
  merge_group:
  workflow_dispatch:
env:
  verus_commit: 04e8687a238debca8323955dc041e3602a5168e0
  kind_version: 0.23.0
  go_version: "^1.20"
  home_dir: /home/runner

jobs:
  build-and-cache-verus:
  # keep consistent with dockerfile
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Get HOME env variable
        id: get-home
        run: |
          echo "home_dir=$HOME" >> $GITHUB_ENV
          echo "home_dir=$HOME"
      - name: Find Verus build and Rust toolchain from cache
        id: cache-verus
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.home_dir }}/verus/source
            ${{ env.home_dir }}/verus/dependencies
            ${{ env.home_dir }}/.cargo
            ${{ env.home_dir }}/.rustup
          key: verus-${{ runner.os }}-${{ env.verus_commit }}-${{ hashFiles('rust-toolchain.toml') }}
      - name: Download Verus if cache is missing
        if: steps.cache-verus.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: verus-lang/verus
          path: verus
          ref: ${{ env.verus_commit }}
      - name: Download Rust toolchain and build Verus if cache is missing
        if: steps.cache-verus.outputs.cache-hit != 'true'
        run: |
          mv verus $HOME/verus
          cd $HOME/verus
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --default-toolchain none -y
          . "$HOME/.cargo/env"
          rustup toolchain install
          cd source
          ./tools/get-z3.sh
          . ../tools/activate
          vargo clean
          vargo build --release
  controller-verification:
    runs-on: ubuntu-22.04 
    strategy: 
      matrix:
        controller: [
          vreplicaset_controller, 
          vreplicaset_admission_controller, 
          vstatefulset_controller,
          vstatefulset_admission_controller,
          vdeployment_controller,
          vdeployment_admission_controller,
          # fluent_controller,
          # rabbitmq_controller,
          # zookeeper_controller,
        ]
    needs: build-and-cache-verus
    defaults:
      run:
        working-directory: controllers/
    steps:
    - uses: actions/checkout@v4
    - name: Restore Verus cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.home_dir }}/verus/source
          ${{ env.home_dir }}/verus/dependencies
          ${{ env.home_dir }}/.cargo
          ${{ env.home_dir }}/.rustup
        key: verus-${{ runner.os }}-${{ env.verus_commit }}-${{ hashFiles('rust-toolchain.toml') }}
    - name: Verify ${{ matrix.controller }}
      run: cargo verus verify ${{ matrix.controller }} -- --rlimit 50 --time
  framework-verification:
    needs: build-and-cache-verus
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Restore Verus cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.home_dir }}/verus/source
            ${{ env.home_dir }}/verus/dependencies
            ${{ env.home_dir }}/.cargo
            ${{ env.home_dir }}/.rustup
          key: verus-${{ runner.os }}-${{ env.verus_commit }}-${{ hashFiles('rust-toolchain.toml') }}
      - name: Verify the Anvil framework
        run: |
          cargo verus verify -- --rlimit 50 --time
  controller-e2e-test:
    needs:
      - build-and-cache-verus
    runs-on: ubuntu-22.04
    strategy: 
      matrix:
        entrypoint: [
          # fluent,
          # rabbitmq,
          # rabbitmq-scaling,
          # rabbitmq-ephemeral,
          # zookeeper, 
          # zookeeper-scaling,
          vreplicaset-admission,
          vstatefulset-admission,
          vdeployment-admission,
          vreplicaset,
          vdeployment,
        ]
        # include: 
        # - target: rabbitmq-scaling
        #   controller: rabbitmq
        # - target: rabbitmq-ephemeral
        #   controller: rabbitmq
        # - target: zookeeper-scaling
        #   controller: zookeeper
    steps:
      - uses: actions/checkout@v4
      - name: Restore Verus cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.home_dir }}/verus/source
            ${{ env.home_dir }}/verus/dependencies
            ${{ env.home_dir }}/.cargo
            ${{ env.home_dir }}/.rustup
          key: verus-${{ runner.os }}-${{ env.verus_commit }}-${{ hashFiles('rust-toolchain.toml') }}
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.go_version }}
      - name: Install kind
        run: go install sigs.k8s.io/kind@v$kind_version
      - name: Deploy ${{ matrix.controller || matrix.entrypoint }}
        run: VERUS_DIR="${HOME}/verus" ./local-test.sh ${{ matrix.controller || matrix.entrypoint }} --build
      - name: Run ${{ matrix.entrypoint }} e2e tests for ${{ matrix.controller || matrix.entrypoint }}
        run: cd e2e && cargo verus build -- --no-verify && target/debug/e2e_test ${{ matrix.entrypoint }}
  # Verified as part of the normal anvil framework verification
  # TODO: split this out into its own crate and verify separately?
  # tla-demo-verification:
  #   needs: build-and-cache-verus
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Restore Verus cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ${{ env.home_dir }}/verus/source
  #           ${{ env.home_dir }}/verus/dependencies
  #           ${{ env.home_dir }}/.cargo
  #           ${{ env.home_dir }}/.rustup
  #         key: verus-${{ runner.os }}-${{ env.verus_commit }}-${{ hashFiles('rust-toolchain.toml') }}
  #     - name: Verify the TLA demo
  #       run: |
  #         . "$HOME/.cargo/env"
  #         VERUS_DIR="${HOME}/verus" ./build.sh tla_demo.rs --crate-type lib --time
